''''

image::../images/divider.png[divider,436,align="center"]

== User Guide To *STM*

=== _Software Transactional Memory_ 

`Software Transactional Memory` (*STM*) gives developers transactional semantics for accessing in-memory data. This is similar to database concepts.

When multiple threads share data in memory, by marking blocks of code as transactional (atomic), the developer delegates the responsibility for data consistency to the *STM* engine. 
*GPars* leverages the https://github.com/pveentjer/Multiverse[Multiverse *STM* engine].

=== Running A Piece of Code Atomically

When using *STM*, developers organize their code into transactions. A transaction is a piece of code, which is executed *atomically* - either *1)* all the code is run or *2)* none at all.  

The data used by the transactional code remains *consistent* irrespective of whether the transaction finishes normally or abruptly.  While running inside a transaction, the code is given an illusion of being *isolated* from other concurrently running transactions so that changes to data in one transaction are not visible in the other ones until the transactions commit. This gives us the *ACI* part of the *ACID* characteristics of database transactions. The *durability* transactional aspect so typical for databases, is not typically mandated for *Stm*.

*GPars* allows developers to specify transaction boundaries by using the _atomic_ closures.

.Sample of *ACI* Transaction Boundaries
[source,groovy,linenums]
----
import groovyx.gpars.stm.GParsStm
import org.multiverse.api.references.TxnInteger
import static org.multiverse.api.StmUtils.newTxnInteger

public class Account {
    private final TxnInteger amount = newTxnInteger(0);

    public void transfer(final int a) {
        GParsStm.atomic {
            amount.increment(a);
        }
    }

    public int getCurrentAmount() {
        GParsStm.atomicWithInt {
            amount.get();
        }
    }
}
----

There are several types of _atomic_ closures, each for a different type of return value:

* _atomic_ - returning _Object_
* _atomicWithInt_ - returning _int_
* _atomicWithLong_ - returning _long_
* _atomicWithBoolean_ - returning _boolean_
* _atomicWithDouble_ - returning _double_
* _atomicWithVoid_ - no return value

*Multiverse*, by default, uses an optimistic locking strategy and automatically rolls back and retries colliding
transactions.  

Developers should refrain from irreversible actions (e.g. writing to the console,
sending e-mails, launching a missile, etc.) in their transactional code.  To increase flexibility, the
default *Multiverse* settings can be customized through custom _atomic blocks_ .

=== Customizing the Transactional Properties

Frequently it's desirable to specify different values for some of the transaction properties
(e.g. read-only transactions, locking strategy, isolation level, etc.).  The _createAtomicBlock_ method will
create a new _AtomicBlock_ configured with the supplied values:

.Create an *AtomicBlock* with Custom Parameters
[source,groovy,linenums]
----
import groovyx.gpars.stm.GParsStm
import org.multiverse.api.AtomicBlock
import org.multiverse.api.PropagationLevel

final TxnExecutor block = GParsStm.createTxnExecutor(maxRetries: 3000, familyName: 'Custom', PropagationLevel: PropagationLevel.Requires, interruptible: false)
assert GParsStm.atomicWithBoolean(block) {
    true
}
----

The customized _AtomicBlock_ can then be used to create transactions using the specified settings. 

''''

NOTE: _AtomicBlock_ instances are thread-safe and can be freely reused among threads and transactions

''''

=== Using the _Transaction_ Object

Atomic closures use the current _Transaction_ as a parameter. The _Txn_ object handle for a transaction can be used to manually control the transaction. 
This is illustrated in the example below, where we use the _retry()_ method to block the current transaction until the counter reaches the desired value:

.A Sample
[source,groovy,linenums]
----
import groovyx.gpars.stm.GParsStm
import org.multiverse.api.PropagationLevel
import org.multiverse.api.TxnExecutor

import static org.multiverse.api.StmUtils.newTxnInteger

final TxnExecutor block = GParsStm.createTxnExecutor(maxRetries: 3000, familyName: 'Custom', PropagationLevel: PropagationLevel.Requires, interruptible: false)

def counter = newTxnInteger(0)
final int max = 100

Thread.start {
    while (counter.atomicGet() < max) {
        counter.atomicIncrementAndGet(1)
        sleep 10
    }
}

assert max + 1 == GParsStm.atomicWithInt(block) { tx ->
    if (counter.get() == max) return counter.get() + 1
    tx.retry()
}
----

''''

=== Data Structures

You might have noticed in previous examples that we use dedicated data structures to hold values. 
The fact is that normal *Java* classes do not support transactions and thus cannot be used directly, 
since *Multiverse* would not be able to share them safely among concurrent transactions, commit them nor roll them back.  

''''

IMPORTANT: normal *Java* classes do not support transactions

''''

We need to use data that knows about transactions:

* _TxnIntRef_
* _TxnLongRef_
* _TxnBooleanRef_
* _TxnDoubleRef_
* _TxnRef_

You typically create these through the factory methods of the _org.multiverse.api.StmUtils_ class.

''''

=== More Information

We decided not to duplicate the information that was already available on the *Multiverse* website.

Unfortunately with the closure of Codehaus, that website is longer available. You may try to gather more information from the https://github.com/pveentjer/Multiverse[Multiverse source code].

As we are unclear about the future of the *Multiverse* project, we will consider using a different *STM* implementation in a future *GPars 2.0*.
